// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: goods/v1/goods.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CategoryInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryInfoRequestMultiError, or nil if none found.
func (m *CategoryInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for ParentCategory

	// no validation rules for Level

	// no validation rules for IsTab

	// no validation rules for Sort

	if len(errors) > 0 {
		return CategoryInfoRequestMultiError(errors)
	}

	return nil
}

// CategoryInfoRequestMultiError is an error wrapping multiple validation
// errors returned by CategoryInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type CategoryInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryInfoRequestMultiError) AllErrors() []error { return m }

// CategoryInfoRequestValidationError is the validation error returned by
// CategoryInfoRequest.Validate if the designated constraints aren't met.
type CategoryInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryInfoRequestValidationError) ErrorName() string {
	return "CategoryInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryInfoRequestValidationError{}

// Validate checks the field values on CategoryInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryInfoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryInfoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryInfoResponseMultiError, or nil if none found.
func (m *CategoryInfoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryInfoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for ParentCategory

	// no validation rules for Level

	// no validation rules for IsTab

	// no validation rules for Sort

	if len(errors) > 0 {
		return CategoryInfoResponseMultiError(errors)
	}

	return nil
}

// CategoryInfoResponseMultiError is an error wrapping multiple validation
// errors returned by CategoryInfoResponse.ValidateAll() if the designated
// constraints aren't met.
type CategoryInfoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryInfoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryInfoResponseMultiError) AllErrors() []error { return m }

// CategoryInfoResponseValidationError is the validation error returned by
// CategoryInfoResponse.Validate if the designated constraints aren't met.
type CategoryInfoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryInfoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryInfoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryInfoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryInfoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryInfoResponseValidationError) ErrorName() string {
	return "CategoryInfoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryInfoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryInfoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryInfoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryInfoResponseValidationError{}

// Validate checks the field values on GoodsTypeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GoodsTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GoodsTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GoodsTypeRequestMultiError, or nil if none found.
func (m *GoodsTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GoodsTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if utf8.RuneCountInString(m.GetName()) < 3 {
		err := GoodsTypeRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTypeCode()) < 3 {
		err := GoodsTypeRequestValidationError{
			field:  "TypeCode",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for NameAlias

	// no validation rules for IsVirtual

	// no validation rules for Desc

	// no validation rules for Sort

	if len(errors) > 0 {
		return GoodsTypeRequestMultiError(errors)
	}

	return nil
}

// GoodsTypeRequestMultiError is an error wrapping multiple validation errors
// returned by GoodsTypeRequest.ValidateAll() if the designated constraints
// aren't met.
type GoodsTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GoodsTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GoodsTypeRequestMultiError) AllErrors() []error { return m }

// GoodsTypeRequestValidationError is the validation error returned by
// GoodsTypeRequest.Validate if the designated constraints aren't met.
type GoodsTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoodsTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoodsTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoodsTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoodsTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoodsTypeRequestValidationError) ErrorName() string { return "GoodsTypeRequestValidationError" }

// Error satisfies the builtin error interface
func (e GoodsTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoodsTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoodsTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoodsTypeRequestValidationError{}

// Validate checks the field values on GoodsTypeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GoodsTypeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GoodsTypeResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GoodsTypeResponseMultiError, or nil if none found.
func (m *GoodsTypeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GoodsTypeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GoodsTypeResponseMultiError(errors)
	}

	return nil
}

// GoodsTypeResponseMultiError is an error wrapping multiple validation errors
// returned by GoodsTypeResponse.ValidateAll() if the designated constraints
// aren't met.
type GoodsTypeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GoodsTypeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GoodsTypeResponseMultiError) AllErrors() []error { return m }

// GoodsTypeResponseValidationError is the validation error returned by
// GoodsTypeResponse.Validate if the designated constraints aren't met.
type GoodsTypeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GoodsTypeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GoodsTypeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GoodsTypeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GoodsTypeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GoodsTypeResponseValidationError) ErrorName() string {
	return "GoodsTypeResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GoodsTypeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGoodsTypeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GoodsTypeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GoodsTypeResponseValidationError{}

// Validate checks the field values on SpecificationValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecificationValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecificationValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecificationValueMultiError, or nil if none found.
func (m *SpecificationValue) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecificationValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AttrId

	if utf8.RuneCountInString(m.GetValue()) < 3 {
		err := SpecificationValueValidationError{
			field:  "Value",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSort() < 3 {
		err := SpecificationValueValidationError{
			field:  "Sort",
			reason: "value must be greater than or equal to 3",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SpecificationValueMultiError(errors)
	}

	return nil
}

// SpecificationValueMultiError is an error wrapping multiple validation errors
// returned by SpecificationValue.ValidateAll() if the designated constraints
// aren't met.
type SpecificationValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecificationValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecificationValueMultiError) AllErrors() []error { return m }

// SpecificationValueValidationError is the validation error returned by
// SpecificationValue.Validate if the designated constraints aren't met.
type SpecificationValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecificationValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecificationValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecificationValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecificationValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecificationValueValidationError) ErrorName() string {
	return "SpecificationValueValidationError"
}

// Error satisfies the builtin error interface
func (e SpecificationValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecificationValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecificationValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecificationValueValidationError{}

// Validate checks the field values on SpecificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecificationRequestMultiError, or nil if none found.
func (m *SpecificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetTypeId() < 1 {
		err := SpecificationRequestValidationError{
			field:  "TypeId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 2 {
		err := SpecificationRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetSort() < 1 {
		err := SpecificationRequestValidationError{
			field:  "Sort",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Status

	// no validation rules for IsSku

	// no validation rules for IsSelect

	for idx, item := range m.GetSpecificationValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpecificationRequestValidationError{
						field:  fmt.Sprintf("SpecificationValue[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpecificationRequestValidationError{
						field:  fmt.Sprintf("SpecificationValue[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpecificationRequestValidationError{
					field:  fmt.Sprintf("SpecificationValue[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SpecificationRequestMultiError(errors)
	}

	return nil
}

// SpecificationRequestMultiError is an error wrapping multiple validation
// errors returned by SpecificationRequest.ValidateAll() if the designated
// constraints aren't met.
type SpecificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecificationRequestMultiError) AllErrors() []error { return m }

// SpecificationRequestValidationError is the validation error returned by
// SpecificationRequest.Validate if the designated constraints aren't met.
type SpecificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecificationRequestValidationError) ErrorName() string {
	return "SpecificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SpecificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecificationRequestValidationError{}

// Validate checks the field values on SpecificationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SpecificationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpecificationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SpecificationResponseMultiError, or nil if none found.
func (m *SpecificationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SpecificationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return SpecificationResponseMultiError(errors)
	}

	return nil
}

// SpecificationResponseMultiError is an error wrapping multiple validation
// errors returned by SpecificationResponse.ValidateAll() if the designated
// constraints aren't met.
type SpecificationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpecificationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpecificationResponseMultiError) AllErrors() []error { return m }

// SpecificationResponseValidationError is the validation error returned by
// SpecificationResponse.Validate if the designated constraints aren't met.
type SpecificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpecificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpecificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpecificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpecificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpecificationResponseValidationError) ErrorName() string {
	return "SpecificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SpecificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpecificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpecificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpecificationResponseValidationError{}

// Validate checks the field values on AttrGroupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AttrGroupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttrGroupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttrGroupRequestMultiError, or nil if none found.
func (m *AttrGroupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AttrGroupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetTypeId() < 1 {
		err := AttrGroupRequestValidationError{
			field:  "TypeId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTitle()) < 3 {
		err := AttrGroupRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Desc

	// no validation rules for Status

	if m.GetSort() < 1 {
		err := AttrGroupRequestValidationError{
			field:  "Sort",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AttrGroupRequestMultiError(errors)
	}

	return nil
}

// AttrGroupRequestMultiError is an error wrapping multiple validation errors
// returned by AttrGroupRequest.ValidateAll() if the designated constraints
// aren't met.
type AttrGroupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttrGroupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttrGroupRequestMultiError) AllErrors() []error { return m }

// AttrGroupRequestValidationError is the validation error returned by
// AttrGroupRequest.Validate if the designated constraints aren't met.
type AttrGroupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttrGroupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttrGroupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttrGroupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttrGroupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttrGroupRequestValidationError) ErrorName() string { return "AttrGroupRequestValidationError" }

// Error satisfies the builtin error interface
func (e AttrGroupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttrGroupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttrGroupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttrGroupRequestValidationError{}

// Validate checks the field values on AttrGroupResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AttrGroupResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttrGroupResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttrGroupResponseMultiError, or nil if none found.
func (m *AttrGroupResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AttrGroupResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TypeId

	// no validation rules for Title

	// no validation rules for Desc

	// no validation rules for Status

	// no validation rules for Sort

	if len(errors) > 0 {
		return AttrGroupResponseMultiError(errors)
	}

	return nil
}

// AttrGroupResponseMultiError is an error wrapping multiple validation errors
// returned by AttrGroupResponse.ValidateAll() if the designated constraints
// aren't met.
type AttrGroupResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttrGroupResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttrGroupResponseMultiError) AllErrors() []error { return m }

// AttrGroupResponseValidationError is the validation error returned by
// AttrGroupResponse.Validate if the designated constraints aren't met.
type AttrGroupResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttrGroupResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttrGroupResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttrGroupResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttrGroupResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttrGroupResponseValidationError) ErrorName() string {
	return "AttrGroupResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AttrGroupResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttrGroupResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttrGroupResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttrGroupResponseValidationError{}

// Validate checks the field values on AttrValueRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AttrValueRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttrValueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttrValueRequestMultiError, or nil if none found.
func (m *AttrValueRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AttrValueRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AttrId

	if m.GetGroupId() < 1 {
		err := AttrValueRequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetValue()) < 3 {
		err := AttrValueRequestValidationError{
			field:  "Value",
			reason: "value length must be at least 3 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AttrValueRequestMultiError(errors)
	}

	return nil
}

// AttrValueRequestMultiError is an error wrapping multiple validation errors
// returned by AttrValueRequest.ValidateAll() if the designated constraints
// aren't met.
type AttrValueRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttrValueRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttrValueRequestMultiError) AllErrors() []error { return m }

// AttrValueRequestValidationError is the validation error returned by
// AttrValueRequest.Validate if the designated constraints aren't met.
type AttrValueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttrValueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttrValueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttrValueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttrValueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttrValueRequestValidationError) ErrorName() string { return "AttrValueRequestValidationError" }

// Error satisfies the builtin error interface
func (e AttrValueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttrValueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttrValueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttrValueRequestValidationError{}

// Validate checks the field values on AttrRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AttrRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttrRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AttrRequestMultiError, or
// nil if none found.
func (m *AttrRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AttrRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if m.GetTypeId() < 1 {
		err := AttrRequestValidationError{
			field:  "TypeId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetGroupId() < 1 {
		err := AttrRequestValidationError{
			field:  "GroupId",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTitle()) < 1 {
		err := AttrRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Desc

	// no validation rules for Status

	if m.GetSort() < 1 {
		err := AttrRequestValidationError{
			field:  "Sort",
			reason: "value must be greater than or equal to 1",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetAttrValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AttrRequestValidationError{
						field:  fmt.Sprintf("AttrValue[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AttrRequestValidationError{
						field:  fmt.Sprintf("AttrValue[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AttrRequestValidationError{
					field:  fmt.Sprintf("AttrValue[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AttrRequestMultiError(errors)
	}

	return nil
}

// AttrRequestMultiError is an error wrapping multiple validation errors
// returned by AttrRequest.ValidateAll() if the designated constraints aren't met.
type AttrRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttrRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttrRequestMultiError) AllErrors() []error { return m }

// AttrRequestValidationError is the validation error returned by
// AttrRequest.Validate if the designated constraints aren't met.
type AttrRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttrRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttrRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttrRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttrRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttrRequestValidationError) ErrorName() string { return "AttrRequestValidationError" }

// Error satisfies the builtin error interface
func (e AttrRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttrRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttrRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttrRequestValidationError{}

// Validate checks the field values on AttrValueResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AttrValueResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttrValueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AttrValueResponseMultiError, or nil if none found.
func (m *AttrValueResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AttrValueResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AttrId

	// no validation rules for GroupId

	// no validation rules for Value

	if len(errors) > 0 {
		return AttrValueResponseMultiError(errors)
	}

	return nil
}

// AttrValueResponseMultiError is an error wrapping multiple validation errors
// returned by AttrValueResponse.ValidateAll() if the designated constraints
// aren't met.
type AttrValueResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttrValueResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttrValueResponseMultiError) AllErrors() []error { return m }

// AttrValueResponseValidationError is the validation error returned by
// AttrValueResponse.Validate if the designated constraints aren't met.
type AttrValueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttrValueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttrValueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttrValueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttrValueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttrValueResponseValidationError) ErrorName() string {
	return "AttrValueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AttrValueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttrValueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttrValueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttrValueResponseValidationError{}

// Validate checks the field values on AttrResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AttrResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AttrResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AttrResponseMultiError, or
// nil if none found.
func (m *AttrResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AttrResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for TypeId

	// no validation rules for GroupId

	// no validation rules for Title

	// no validation rules for Desc

	// no validation rules for Status

	// no validation rules for Sort

	for idx, item := range m.GetAttrValue() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AttrResponseValidationError{
						field:  fmt.Sprintf("AttrValue[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AttrResponseValidationError{
						field:  fmt.Sprintf("AttrValue[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AttrResponseValidationError{
					field:  fmt.Sprintf("AttrValue[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AttrResponseMultiError(errors)
	}

	return nil
}

// AttrResponseMultiError is an error wrapping multiple validation errors
// returned by AttrResponse.ValidateAll() if the designated constraints aren't met.
type AttrResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AttrResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AttrResponseMultiError) AllErrors() []error { return m }

// AttrResponseValidationError is the validation error returned by
// AttrResponse.Validate if the designated constraints aren't met.
type AttrResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AttrResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AttrResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AttrResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AttrResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AttrResponseValidationError) ErrorName() string { return "AttrResponseValidationError" }

// Error satisfies the builtin error interface
func (e AttrResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAttrResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AttrResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AttrResponseValidationError{}
